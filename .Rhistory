suppressPackageStartupMessages({
library(rstudioapi, quietly=T)
library(dplyr, quietly = T)
library(ggplot2, quietly = T)
library(WGCNA, quietly = T)
library(org.Hs.eg.db, quietly = T)
})
options(stringsAsFactors = FALSE)
enableWGCNAThreads()
#Paths to files
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
filesD <- 'resultsWGCNA/'
inputData <- paste0(filesD,'initialData_datExpr_sampleTable.RData')
inputNet <- paste0(filesD, 'network_manual_construction.RData')
load(inputData)
load(inputNet)
modtraitF <- paste0(filesD, "Module-trait_relation.pdf")
intramodFpref <- paste0(filesD, 'intramodular_')
#Parameters
nSamples <- nrow(datExpr)
alpha <- 0.01
#Transform qualitative traits to binary code
levels(sampleTable$condition) <- c(1,0)
colnames(sampleTable)[4] <- 'is.Affected'
#We recode the other categorical covariates to check if there is correlation
#It shouldnt because we already took them into account
levels(sampleTable$gender) <- c(1,0)
colnames(sampleTable)[1] <- 'is.Female'
levels(sampleTable$age) <- c(1,2,0)
levels(sampleTable)[2] <- 'age_stage'
#Calculate correlations and p values taking into account # observations
cp <- corAndPvalue(MEs, sampleTable)
moduleTraitCor <- cp$cor
moduleTraitPvalue <- cp$p
View(moduleTraitCor)
View(moduleTraitPvalue)
#Get all together:
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
textMatrix
dim(textMatrix) <- dim(moduleTraitCor) #give shape
#Graphical representation:
pdf(file = modtraitF, height = 20, width = 10)
par(mar = c(6, 8.5, 3, 3))
title <- "Module-trait relationships"
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE, colors = blueWhiteRed(50),
textMatrix = textMatrix, setStdMargins = FALSE, main = title)
invisible(dev.off())
#B) Focus on trait of interest: condition
condition <- as.data.frame(sampleTable$is.Affected)
names(condition) <- 'condition'
moduleNames <- substring(names(MEs), 3) #3 to take away prefix
#correlation of each gene in each sample to each module
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
names(geneModuleMembership) <- paste("MM", moduleNames, sep="_")
#p value of last correlation
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(MMPvalue) <- paste("p_MM", moduleNames, sep="_")
#correlation of each gene to each condition
geneTraitSignificance <- as.data.frame(cor(datExpr, condition, use = "p"))
View(MMPvalue)
#correlation of each gene to each condition
geneTraitS <- cor(datExpr, condition, use = "p")
class(condition)
#correlation of each gene to each condition
geneTraitS <- cor(datExpr, as.numeric(condition), use = "p")
#correlation of each gene to each condition
geneTraitS <- cor(datExpr, condition, use = "p")
modMemb <- corAndPvalue(datExpr, MEs)
geneModuleMembership <- modMemb$cor
geneModuleMembership <- as.data.frame(geneModuleMembership)
names(geneModuleMembership) <- paste("MM", moduleNames, sep="_")
MMPvalue <- modMemb$p
MMPvalue <- as.data.frame(MMPvalue)
names(MMPvalue) <- paste("p_MM", moduleNames, sep="_")
#correlation of each gene to each condition, thus, gene significance
geneSignif <- corAndPvalue(datExpr, condition)
geneTraitSignificance <- geneSignif$cor
geneTraitSignificance <- as.data.frame(geneTraitSignificance)
names(geneTraitSignificance) <- paste("GS.", names(condition), sep="")
GSPvalue <- geneSignif$p
GSPvalue <- as.data.frame(GSPvalue)
filesD <- 'resultsWGCNA/'
inputData <- paste0(filesD,'initialData_datExpr_sampleTable.RData')
inputNet <- paste0(filesD, 'network_manual_construction.RData')
load(inputData)
load(inputNet)
modtraitF <- paste0(filesD, "Module-trait_relation.pdf")
intramodFpref <- paste0(filesD, 'intramodular_')
#Parameters
nSamples <- nrow(datExpr)
alpha <- 0.01
#A) Quantify module trait associations
#Transform qualitative traits to binary code
levels(sampleTable$condition) <- c(1,0)
colnames(sampleTable)[4] <- 'is.Affected'
#We recode the other categorical covariates to check if there is correlation
#It shouldnt because we already took them into account
levels(sampleTable$gender) <- c(1,0)
colnames(sampleTable)[1] <- 'is.Female'
levels(sampleTable$age) <- c(1,2,0)
levels(sampleTable)[2] <- 'age_stage'
#Probar aÃ±adiendo una columna con las edades reales
#Calculate correlations and p values taking into account # observations
cp <- corAndPvalue(MEs, sampleTable)
moduleTraitCor <- cp$cor
moduleTraitPvalue <- cp$p
#Get all together:
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) <- dim(moduleTraitCor) #give shape
#Graphical representation:
pdf(file = modtraitF, height = 20, width = 10)
par(mar = c(6, 8.5, 3, 3))
title <- "Module-trait relationships"
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE, colors = blueWhiteRed(50),
textMatrix = textMatrix, setStdMargins = FALSE, main = title)
invisible(dev.off())
#B) Focus on trait of interest: condition
condition <- as.data.frame(sampleTable$is.Affected)
names(condition) <- 'condition'
moduleNames <- substring(names(MEs), 3) #3 to take away prefix
modMemb <- corAndPvalue(datExpr, MEs)
geneModuleMembership <- modMemb$cor
geneModuleMembership <- as.data.frame(geneModuleMembership)
names(geneModuleMembership) <- paste("MM", moduleNames, sep="_")
MMPvalue <- modMemb$p
MMPvalue <- as.data.frame(MMPvalue)
names(MMPvalue) <- paste("p_MM", moduleNames, sep="_")
#correlation of each gene to each condition, thus, gene significance
geneSignif <- corAndPvalue(datExpr, condition)
geneTraitSignificance <- geneSignif$cor
geneTraitSignificance <- as.data.frame(geneTraitSignificance)
names(geneTraitSignificance) <- paste("GS.", names(condition), sep="")
GSPvalue <- geneSignif$p
GSPvalue <- as.data.frame(GSPvalue)
names(GSPvalue) <- paste("p.GS.", names(condition), sep="")
#First get significant modules
moduleTraitPvalue <- as.data.frame(moduleTraitPvalue)
moduleTraitPvalue
sigMods <- filter(moduleTraitPvalue, moduleTraitPvalue$is.Affected < alpha)
sigMods <- substring(rownames(sigMods), 3)
sigMods
#Plot significance of each gene in every significant module
# against their correlation to the module.
for (mod in sigMods){
column <- match(mod, moduleNames)
moduleGenes <- moduleColors==mod
x <- abs(geneModuleMembership[moduleGenes, column])
xlab <- paste("Module Membership in", mod, "module")
y <- abs(geneTraitSignificance[moduleGenes, 1])
ylab <- "Gene significance for condition"
title <- "Module membership vs. gene significance\n"
tiff(filename = paste0(intramodFpref, mod, '.tiff'), units="in", width=5,
height=5, res=300)
verboseScatterplot(x, y, xlab = xlab, ylab = ylab, main = title,
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = mod)
invisible(dev.off())
}
#D) Summary output
#Gene information data frame
genes <- names(datExpr)
symbol <- mapIds(org.Hs.eg.db, keys = genes, column = 'SYMBOL',
keytype = 'ENSEMBL', multiVals = 'first')
geneInfo <- data.frame(geneSymbol = symbol, moduleColor = moduleColors,
geneTraitSignificance, GSPvalue)
# Order modules by their significance for the condition
modOrder <- order(-abs(cor(MEs, condition, use = "p")))
?abs
# Order modules by their significance for the condition
eigengeneTraitCorrelation <- cor(MEs, condition, use = "p")
# Order modules by their significance for the condition
eigengeneTraitCorrelation <- cor(MEs, condition, method = "p")
?cor
# Order modules by their significance for the condition
eigengeneTraitCorrelation <- WGCNA::cor(MEs, condition, method = "p")
modOrder <- order(-abs(eigengeneTraitCorrelation))
geneInfoF <- paste0(filesD, 'genes_info.tsv')
geneInfoF
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership)) {
oldNames <- names(geneInfo)
geneInfo <- data.frame(geneInfo, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo) <- c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership)) {
oldNames <- names(geneInfo)
geneInfo <- data.frame(geneInfo,
geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]])
nameMod <- paste0("MM.", modNames[modOrder[mod]])
names(geneInfo) <- c(oldNames, nameMod,
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership)) {
oldNames <- names(geneInfo)
geneInfo <- data.frame(geneInfo,
geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]])
modMem <- paste0("MM.", moduleNames[modOrder[mod]])
pModMem <- paste0("p.MM.", moduleNames[modOrder[mod]])
names(geneInfo) <- c(oldNames, modMem,pModMem)
}
names(geneInfo)
names(geneInfo)
colnames(geneInfo)
View(geneInfo)
# Order the genes in the geneInfo variable first by module color,
#then by geneTraitSignificance
geneOrder <- order(geneInfo$moduleColor, -abs(geneInfo$GS.condition));
geneInfo <- geneInfo[geneOrder, ]
write.csv(geneInfo, file = geneInfoF)
?write.tsv
?write.csv
write.table(geneInfo, file = geneInfoF, sep = "\t", row.names = T)
write.table(geneInfo, file = geneInfoF, sep = "\t", row.names = T, col.names = T,
quote = F)
View(GSPvalue)
write.table(geneInfo, file = geneInfoF, sep = "\t", row.names = T, col.names = NA,
quote = F)
