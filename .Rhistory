rownames(df) = samples
my_colour = list(df=c(l1="orange", l2="skyblue"))
suffix <- paste(l2, l1, sep="_vs_")
res <- results(dds, contrast=c("condition", l2, l1))
res$FoldChange <- 2^res$log2FoldChange
res <- res[colnames(res)[c(1,7,2:6)]] # order columns
# MAplot
file <- paste("deseq2_maplot_", suffix, ".tiff", sep="")
main <- paste("MA-plot", suffix, sep=" ")
tiff(filename = file, units="in", width=5, height=5, res=300)
plotMA(res, alpha= 0.05, main=main)
#		identify(res$baseMean, res$log2FoldChange)	# draw line number of gene clicking on a point
invisible(dev.off())
if (!is.null(orgdb)){
symbol <- mapIds(get(orgdb), keys=row.names(res), column="ENTREZID", keytype="SYMBOL", multiVals="first") #to obtain gene symbols
description <- mapIds(get(orgdb), keys=row.names(res), column="GENENAME", keytype="SYMBOL", multiVals="first") #to obtain description
res <- cbind(symbol, res) #to add the symbols to the results file
res$description <- description
}
# writing results for all & significative genes
file <- paste("deseq2_all_", suffix, ".tsv", sep="")
write.table (res, file=file, quote=FALSE, sep="\t", col.names=NA)
file <- paste("deseq2_sig_padj", suffix, ".tsv", sep="")
sig <- subset(res, res$padj < cutoff)
subcounts <- subset(ncounts, rownames(ncounts) %in% rownames(sig))
subcounts <- subcounts[,rownames(df)]
lsubcounts <- log2(subcounts+1)
write.table (sig, file=file, quote=FALSE, sep="\t", col.names=NA)
# save results with pvalue instead of padj
file <- paste("deseq2_sig_pval", suffix, ".tsv", sep="")
sig_pval <- subset(res, res$pvalue < cutoff)
write.table (sig_pval, file=file, quote=FALSE, sep="\t", col.names=NA)
# heatmap of DEG
file <- paste("deseq2_heatmap_", suffix, ".tiff", sep="")
main <- paste("Heatmap", suffix, "log2(exp+1)", sep=" ")
tiff(filename = file, units="in", width=5, height=5, res=300)
pheatmap(mat=lsubcounts, color=hmcol, border_color=F, scale="row", cluster_cols=T,
cluster_rows=T, fontsize_row=9, annotation_col=df, annotation_colors=my_colour, show_rownames=F,
show_colnames=T, annotation_names_col=F, annotation_names_row=F, main=main)
invisible(dev.off())
}
}
# 5. Save work space and quit
#############################
msg1 = "!!O_o!!----------------DONE------------------"
msg2 = "That's all folks! Quitting ..."
print(msg1)
print(msg2)
save(list=ls(), file="deseq2.RData")
#q()
suppressPackageStartupMessages({
library(optparse, quietly = TRUE)
library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
library('org.Hs.eg.db', quietly = TRUE, character.only = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(tidyr, quietly= TRUE)
})
#Load variables of each sample
config <- './configfile_pedlabels.txt'
sampleTable <- read.table(config, header=TRUE, colClasses= c('factor','character',
'factor',
'factor', 'factor',
'factor'))
#Convert the counts into a DeSeq DataSet object
data <- DESeqDataSetFromHTSeqCount(sampleTable, directory=".",
design = ~ age + gender + PED + condition)
## Analysis
#Pre-filtering: clean some of the noise in the counts
keep <- rowSums(counts(data)) >= 10
data <- data[keep,]
rm(keep)
# DESeq: not original function to adjust number of iterations
dds <- estimateSizeFactors(data)
dds <- estimateDispersions(dds)
dds <- nbinomWaldTest(dds, maxit = 10000)
dds_raw <- counts(dds, normalized=FALSE)
dds_normalized <- counts(dds, normalized=TRUE)
#Convert the counts into a DeSeq DataSet object
data <- DESeqDataSetFromHTSeqCount(sampleTable, directory=".",
design = ~ age + gender + PED + condition)
sampleTable <- read.table(config, header=TRUE, colClasses= c('factor','character',
'factor',
'factor', 'factor',
'factor'))
#Load variables of each sample
config <- './configfile_pedlabels.txt'
sampleTable <- read.table(config, header=TRUE, colClasses= c('factor','character',
'factor',
'factor', 'factor',
'factor'))
#####################
setwd("C:/Users/CBM/Desktop/RNAseq_bipolarDisorder")
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
library(org.Hs.eg.db)
library(fgsea, quietly = T)
})
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(org.Hs.eg.db)
library(fgsea, quietly = T)
})
data <- read.table('MyResults_DEG/all_genes.tsv', sep= "\t", header=T, row.names = 1)
prefix <- 'GSEA'
View(data)
View(data)
dat <- data$log2FoldChange
names(dat) <- as.character(rownames(data))
head(dat)
dat <- sort(dat, decreasing=TRUE)
#Calculate GSEA and write tables of results
set.seed(1)
egs <- gseGO(geneList = dat, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL",
ont= "ALL")
View(egs)
egs_genename <- setReadable(egs, OrgDb = "org.Hs.eg.db")
write.table(egs, file = paste("tableGO_",prefix,".txt", sep =""), sep= "\t", quote = F)
write.table(egs, file = "MyResults_GSEA/tableGO_GSEA.txt", sep= "\t", quote = F)
write.table(egs_genename, file = "tableGO_GSEA_genename.txt", sep= "\t", quote = F)
jpeg(file = "GSEA_dotplot.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
#####################
setwd("C:/Users/CBM/Desktop/RNAseq_bipolarDisorder")
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(org.Hs.eg.db)
library(fgsea, quietly = T)
})
data <- read.table('MyResults_DEG/all_genes.tsv', sep= "\t", header=T, row.names = 1)
dat <- data$log2FoldChange
names(dat) <- as.character(rownames(data))
dat <- sort(dat, decreasing=TRUE)
#Calculate GSEA and write tables of results
set.seed(1)
egs <- gseGO(geneList = dat, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL",
ont= "ALL")
egs_genename <- setReadable(egs, OrgDb = "org.Hs.eg.db")
write.table(egs, file = "MyResults_GSEA/tableGO_GSEA.txt", sep= "\t", quote = F)
write.table(egs_genename, file = "tableGO_GSEA_genename.txt", sep= "\t", quote = F)
jpeg(file = "MyResults_GSEA/GSEA_dotplot.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_gene_concept_net.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs_genename, categorySize="pvalue", foldChange=dat_sort, font.size = 15, colorEdge = T)
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="pvalue")
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=dat_sort)
invisible(dev.off())
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
for (i in 1:nrow(genes_20first)){
lista_20first[[i]] <- unlist(strsplit(as.character(genes_20first[i,1]),split="/"))
}
uniq_genes <- as.character(unique(names(dat_sort)))
func_20first <- egs$Description[1:20]
mat <- matrix(0L, nrow = length(uniq_genes), ncol = length(func_20first))
for (i in 1:length(uniq_genes)) {
for (j in 1:length(func_20first)) {
gen <- uniq_genes[i]
if (gen %in% lista_20first[[j]]) {
mat[i,j] =  1
}}}
data <- read.table('MyResults_DEG/all_genes.tsv', sep= "\t", header=T, row.names = 1)
#Calculate GSEA
dat <- data$log2FoldChange
names(dat) <- as.character(rownames(data))
dat <- sort(dat, decreasing=TRUE)
#Calculate GSEA and write tables of results
set.seed(1)
egs <- gseGO(geneList = dat, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL",
ont= "ALL")
egs_genename <- setReadable(egs, OrgDb = "org.Hs.eg.db")
write.table(egs, file = "MyResults_GSEA/tableGO_GSEA.txt", sep= "\t", quote = F)
write.table(egs_genename, file = "tableGO_GSEA_genename.txt", sep= "\t", quote = F)
##Dotplot / BarPlot
jpeg(file = "MyResults_GSEA/GSEA_dotplot.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
##Gene-concept network
jpeg(file = "MyResults_GSEA/GSEA_gene_concept_net.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs_genename, categorySize="pvalue", foldChange=dat, font.size = 15, colorEdge = T)
invisible(dev.off())
##Ridgeline plot
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="pvalue")
invisible(dev.off())
##Heatplot
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=dat)
invisible(dev.off())
##Upset plot (of the 20 first terms)
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
for (i in 1:nrow(genes_20first)){
lista_20first[[i]] <- unlist(strsplit(as.character(genes_20first[i,1]),split="/"))
}
uniq_genes <- as.character(unique(names(dat)))
func_20first <- egs$Description[1:20]
mat <- matrix(0L, nrow = length(uniq_genes), ncol = length(func_20first))
for (i in 1:length(uniq_genes)) {
for (j in 1:length(func_20first)) {
gen <- uniq_genes[i]
if (gen %in% lista_20first[[j]]) {
mat[i,j] =  1
}}}
mat_20first <- as.data.frame(mat)
colnames(mat_20first) <- func_20first
row.names(mat_20first) <- uniq_genes
jpeg(file = "MyResults_GSEA/GSEA_upset_20first.jpeg", units = 'in', width = 15, height = 10, res = 300)
upset(mat_20first, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
##################################
###Plot the GSEA if terms are provided and if not, plot the first 5 more abundant terms
for (j in 1:5){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste(desc, "_", prefix, ".jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
install.packages("ggridges")
data <- read.table('MyResults_DEG/all_genes.tsv', sep= "\t", header=T, row.names = 1)
#Calculate GSEA
dat <- data$log2FoldChange
names(dat) <- as.character(rownames(data))
dat <- sort(dat, decreasing=TRUE)
#Calculate GSEA and write tables of results
set.seed(1)
egs <- gseGO(geneList = dat, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL",
ont= "ALL")
egs_genename <- setReadable(egs, OrgDb = "org.Hs.eg.db")
write.table(egs, file = "MyResults_GSEA/tableGO_GSEA.txt", sep= "\t", quote = F)
write.table(egs_genename, file = "MyResults_GSEA/tableGO_GSEA_genename.txt", sep= "\t", quote = F)
##Dotplot / BarPlot
jpeg(file = "MyResults_GSEA/GSEA_dotplot.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
##Gene-concept network
jpeg(file = "MyResults_GSEA/GSEA_gene_concept_net.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs_genename, categorySize="pvalue", foldChange=dat, font.size = 15, colorEdge = T)
invisible(dev.off())
##Ridgeline plot
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="pvalue")
invisible(dev.off())
##Heatplot
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=dat)
invisible(dev.off())
##Upset plot (of the 20 first terms)
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
for (i in 1:nrow(genes_20first)){
lista_20first[[i]] <- unlist(strsplit(as.character(genes_20first[i,1]),split="/"))
}
uniq_genes <- as.character(unique(names(dat)))
func_20first <- egs$Description[1:20]
mat <- matrix(0L, nrow = length(uniq_genes), ncol = length(func_20first))
for (i in 1:length(uniq_genes)) {
for (j in 1:length(func_20first)) {
gen <- uniq_genes[i]
if (gen %in% lista_20first[[j]]) {
mat[i,j] =  1
}}}
mat_20first <- as.data.frame(mat)
colnames(mat_20first) <- func_20first
row.names(mat_20first) <- uniq_genes
jpeg(file = "MyResults_GSEA/GSEA_upset_20first.jpeg", units = 'in', width = 15, height = 10, res = 300)
upset(mat_20first, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
##################################
###Plot the GSEA if terms are provided and if not, plot the first 5 more abundant terms
for (j in 1:5){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste('MyResults_GSEA/',desc, "_GSEA.jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
data <- read.table('MyResults_DEG/0.05_sig_padj.tsv', sep= "\t", header=T, row.names = 1)
data <- read.table('MyResults_DEG/0.05_sig_padj.tsv', sep= "\t", header=T, row.names = 1)
#Calculate GSEA
dat <- data$log2FoldChange
names(dat) <- as.character(rownames(data))
dat <- sort(dat, decreasing=TRUE)
#Calculate GSEA and write tables of results
set.seed(1)
egs <- gseGO(geneList = dat, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL",
ont= "ALL")
egs_genename <- setReadable(egs, OrgDb = "org.Hs.eg.db")
write.table(egs, file = "MyResults_GSEA/tableGO_GSEA.txt", sep= "\t", quote = F)
write.table(egs_genename, file = "MyResults_GSEA/tableGO_GSEA_genename.txt", sep= "\t", quote = F)
##Dotplot / BarPlot
jpeg(file = "MyResults_GSEA/GSEA_dotplot.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
##Gene-concept network
jpeg(file = "MyResults_GSEA/GSEA_gene_concept_net.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs_genename, categorySize="pvalue", foldChange=dat, font.size = 15, colorEdge = T)
invisible(dev.off())
##Ridgeline plot
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="pvalue")
invisible(dev.off())
##Heatplot
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=dat)
invisible(dev.off())
##Upset plot (of the 20 first terms)
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
for (i in 1:nrow(genes_20first)){
lista_20first[[i]] <- unlist(strsplit(as.character(genes_20first[i,1]),split="/"))
}
uniq_genes <- as.character(unique(names(dat)))
func_20first <- egs$Description[1:20]
mat <- matrix(0L, nrow = length(uniq_genes), ncol = length(func_20first))
for (i in 1:length(uniq_genes)) {
for (j in 1:length(func_20first)) {
gen <- uniq_genes[i]
if (gen %in% lista_20first[[j]]) {
mat[i,j] =  1
}}}
mat_20first <- as.data.frame(mat)
colnames(mat_20first) <- func_20first
row.names(mat_20first) <- uniq_genes
jpeg(file = "MyResults_GSEA/GSEA_upset_20first.jpeg", units = 'in', width = 15, height = 10, res = 300)
upset(mat_20first, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
##################################
###Plot the GSEA if terms are provided and if not, plot the first 5 more abundant terms
for (j in 1:5){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste('MyResults_GSEA/',desc, "_GSEA.jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
data <- read.table('MyResults_DEG/sig_pval.tsv', sep= "\t", header=T, row.names = 1)
?read.table
data <- read.delim('MyResults_DEG/sig_pval.tsv', sep= "\t", header=T, row.names = 1)
dat <- data$log2FoldChange
names(dat) <- as.character(rownames(data))
dat <- sort(dat, decreasing=TRUE)
#Calculate GSEA and write tables of results
set.seed(1)
egs <- gseGO(geneList = dat, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL",
ont= "ALL")
egs_genename <- setReadable(egs, OrgDb = "org.Hs.eg.db")
write.table(egs, file = "MyResults_GSEA/tableGO_GSEA.txt", sep= "\t", quote = F)
write.table(egs_genename, file = "MyResults_GSEA/tableGO_GSEA_genename.txt", sep= "\t", quote = F)
jpeg(file = "MyResults_GSEA/GSEA_dotplot.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_gene_concept_net.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs_genename, categorySize="pvalue", foldChange=dat, font.size = 15, colorEdge = T)
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="pvalue")
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=dat)
invisible(dev.off())
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
for (i in 1:nrow(genes_20first)){
lista_20first[[i]] <- unlist(strsplit(as.character(genes_20first[i,1]),split="/"))
}
uniq_genes <- as.character(unique(names(dat)))
func_20first <- egs$Description[1:20]
mat <- matrix(0L, nrow = length(uniq_genes), ncol = length(func_20first))
for (i in 1:length(uniq_genes)) {
for (j in 1:length(func_20first)) {
gen <- uniq_genes[i]
if (gen %in% lista_20first[[j]]) {
mat[i,j] =  1
}}}
mat_20first <- as.data.frame(mat)
colnames(mat_20first) <- func_20first
row.names(mat_20first) <- uniq_genes
jpeg(file = "MyResults_GSEA/GSEA_upset_20first.jpeg", units = 'in', width = 15, height = 10, res = 300)
upset(mat_20first, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
for (j in 1:5){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste('MyResults_GSEA/',desc, "_GSEA.jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
## GSEA using gene sets from KEGG pathways
gseaKEGG <- gseKEGG(geneList = dat, # ordered named vector of fold changes (Entrez IDs are the associated names)
organism = "hsa", # supported organisms listed below
nPerm = 1000, # default number permutations
minGSSize = 20, # minimum gene set size (# genes in set) - change to test more sets or recover sets with fewer # genes
pvalueCutoff = 0.05, # padj cutoff value
verbose = FALSE)
View(egs)
data <- read.delim('MyResults_DEG/sig_pval.tsv', sep= "\t", header=T, row.names = 1)
dat <- data$log2FoldChange
names(dat) <- as.character(rownames(data))
dat <- sort(dat, decreasing=TRUE)
#Calculate GSEA and write tables of results
set.seed(1)
egs <- gseGO(geneList = dat, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL",
ont= "ALL")
egs_genename <- setReadable(egs, OrgDb = "org.Hs.eg.db")
write.table(egs, file = "MyResults_GSEA/tableGO_GSEA.txt", sep= "\t", quote = F)
write.table(egs_genename, file = "MyResults_GSEA/tableGO_GSEA_genename.txt", sep= "\t", quote = F)
jpeg(file = "MyResults_GSEA/GSEA_dotplot.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_gene_concept_net.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs_genename, categorySize="pvalue", foldChange=dat, font.size = 15, colorEdge = T)
invisible(dev.off())
install.packages("ggnewscale")
jpeg(file = "MyResults_GSEA/GSEA_gene_concept_net.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs_genename, categorySize="pvalue", foldChange=dat, font.size = 15, colorEdge = T)
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="pvalue")
invisible(dev.off())
jpeg(file = "MyResults_GSEA/GSEA_ridge.jpeg", units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=dat)
invisible(dev.off())
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
for (i in 1:nrow(genes_20first)){
lista_20first[[i]] <- unlist(strsplit(as.character(genes_20first[i,1]),split="/"))
}
uniq_genes <- as.character(unique(names(dat)))
func_20first <- egs$Description[1:20]
mat <- matrix(0L, nrow = length(uniq_genes), ncol = length(func_20first))
for (i in 1:length(uniq_genes)) {
for (j in 1:length(func_20first)) {
gen <- uniq_genes[i]
if (gen %in% lista_20first[[j]]) {
mat[i,j] =  1
}}}
for (i in 1:length(uniq_genes)) {
for (j in 1:length(func_20first)) {
gen <- uniq_genes[i]
if (gen %in% lista_20first[[j]]) {
mat[i,j] =  1
}}}
mat_20first <- as.data.frame(mat)
colnames(mat_20first) <- func_20first
row.names(mat_20first) <- uniq_genes
jpeg(file = "MyResults_GSEA/GSEA_upset_20first.jpeg", units = 'in', width = 15, height = 10, res = 300)
upset(mat_20first, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
for (j in 1:5){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste('MyResults_GSEA/',desc, "_GSEA.jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
?gsub
