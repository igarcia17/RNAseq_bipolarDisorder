# Analysis
#---------
dds <- DESeq(data)
ncounts <- counts(dds, normalized=TRUE)
write.table (ncounts, file="deseq2_counts.tsv", quote=FALSE, sep = "\t", col.names=NA)
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:30]
hmcol <- colorRampPalette(c("yellow", "black", "cyan"))(299)
# Data transformations to better visualize them
#----------------------------------------------
# Tikhonov Regularized Log Transformation (RLT)
# see http://en.wikipedia.org/wiki/Tikhonov_regularization
rlt <- rlog(dds)
rltMat <- assay(rlt)
# variance stabilizing transformation (VST)
# see http://en.wikipedia.org/wiki/Variance-stabilizing_transformation
vst <- varianceStabilizingTransformation(dds)
vstMat <- assay(vst)
# effects of the transformation in the variance
notAllZero <- (rowSums(counts(dds))>0)	# dicard zero counts
# distances heatmap
distRL <- dist(t(rltMat))
distMat <- as.matrix(distRL)
hc <- hclust(distRL)
tiff(filename = "deseq2_distances.tiff", units="in", width=5, height=5, res=300)
heatmap.2(distMat, Rowv=as.dendrogram(hc), symm=TRUE, trace="none", col=rev(hmcol),
margin=c(10, 6), main="Distances matrix", key.title=NA)
invisible(dev.off())
tiff(filename = "deseq2_hm30_vst.tiff", units="in", width=5, height=5, res=300)
par(cex.main=0.8)
heatmap.2(vstMat[select,], col=hmcol, Rowv=FALSE, Colv=FALSE, scale="none",
dendrogram="none", trace="none", margin=c(5, 7), main="30 most highly \n expressed genes (VST)", labRow=F, key.title=NA)
invisible(dev.off())
# PCA plot_labelled
require("ggrepel")
tiff(filename = "deseq2_pca_labels.tiff", units="in", width=5, height=5, res=300)
pca <- plotPCA(rlt)
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes(label=colnames(rlt)),  size=2)
invisible(dev.off())
# Dispersion_plot
# plots the per-gene dispersion estimates together with the fitted
# mean-dispersion relationship
tiff(filename = "deseq2_dispersion.tiff", units="in", width=5, height=5, res=300)
plotDispEsts(dds, main="Per-gene dispersion estimates")
invisible(dev.off())
# Pair-wise comparisons
#----------------------
for (i in 1:(ll-1)) {
for (j in (i+1):ll) {
l1 <- toString(levels[i])
l2 <- toString(levels[j])
conditions = c(l1, l2)
conds = subset(sampleTable, sampleTable$condition %in% conditions)
samples = conds$sample
df = data.frame(condition=conds$condition)
rownames(df) = samples
my_colour = list(df=c(l1="orange", l2="skyblue"))
suffix <- paste(l2, l1, sep="_vs_")
res <- results(dds, contrast=c("condition", l2, l1))
res$FoldChange <- 2^res$log2FoldChange
res <- res[colnames(res)[c(1,7,2:6)]] # order columns
# MAplot
file <- paste("deseq2_maplot_", suffix, ".tiff", sep="")
main <- paste("MA-plot", suffix, sep=" ")
tiff(filename = file, units="in", width=5, height=5, res=300)
plotMA(res, alpha= 0.05, main=main)
#		identify(res$baseMean, res$log2FoldChange)	# draw line number of gene clicking on a point
invisible(dev.off())
if (!is.null(orgdb)){
symbol <- mapIds(get(orgdb), keys=row.names(res), column="ENTREZID", keytype="SYMBOL", multiVals="first") #to obtain gene symbols
description <- mapIds(get(orgdb), keys=row.names(res), column="GENENAME", keytype="SYMBOL", multiVals="first") #to obtain description
res <- cbind(symbol, res) #to add the symbols to the results file
res$description <- description
}
# writing results for all & significative genes
file <- paste("deseq2_all_", suffix, ".tsv", sep="")
write.table (res, file=file, quote=FALSE, sep="\t", col.names=NA)
file <- paste("deseq2_sig_padj", suffix, ".tsv", sep="")
sig <- subset(res, res$padj < cutoff)
subcounts <- subset(ncounts, rownames(ncounts) %in% rownames(sig))
subcounts <- subcounts[,rownames(df)]
lsubcounts <- log2(subcounts+1)
write.table (sig, file=file, quote=FALSE, sep="\t", col.names=NA)
# save results with pvalue instead of padj
file <- paste("deseq2_sig_pval", suffix, ".tsv", sep="")
sig_pval <- subset(res, res$pvalue < cutoff)
write.table (sig_pval, file=file, quote=FALSE, sep="\t", col.names=NA)
# heatmap of DEG
file <- paste("deseq2_heatmap_", suffix, ".tiff", sep="")
main <- paste("Heatmap", suffix, "log2(exp+1)", sep=" ")
tiff(filename = file, units="in", width=5, height=5, res=300)
pheatmap(mat=lsubcounts, color=hmcol, border_color=F, scale="row", cluster_cols=T,
cluster_rows=T, fontsize_row=9, annotation_col=df, annotation_colors=my_colour, show_rownames=F,
show_colnames=T, annotation_names_col=F, annotation_names_row=F, main=main)
invisible(dev.off())
}
}
# 5. Save work space and quit
#############################
msg1 = "!!O_o!!----------------DONE------------------"
msg2 = "That's all folks! Quitting ..."
print(msg1)
print(msg2)
save(list=ls(), file="deseq2.RData")
q()
## R script to run a differential expression analysis using DESeq2.
## Counts files must be generated by HTSeq.
## RamÃ³n PeirÃ³-Pastor, Eva Castillo Rosa, Eva SacristÃ¡n and Sandra GonzÃ¡lez (GENGS CBMSO)
## Based on a draft script by Alberto Rastrojo Lastras (CBMSO)
##################################################################
## O. Clean and libraries
##################
cat("\n Checking if all libraries are installed \n")
rm(list=ls())
repos = "http://cran.us.r-project.org"
if ("optparse" %in% row.names(installed.packages())  == FALSE) install.packages("optparse", repos = repos)
if ("gplots" %in% row.names(installed.packages())  == FALSE) install.packages("gplots", repos = repos)
if ("ggplot2" %in% row.names(installed.packages())  == FALSE) install.packages("ggplot2", repos = repos)
if ("RColorBrewer" %in% row.names(installed.packages())  == FALSE) install.packages("RColorBrewer", repos = repos)
if ("cluster" %in% row.names(installed.packages())  == FALSE) install.packages("cluster", repos = repos)
if ("pheatmap" %in% row.names(installed.packages())  == FALSE) install.packages("pheatmap", repos = repos)
if ("grid" %in% row.names(installed.packages())  == FALSE) install.packages("grid", repos = repos)
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager", repos = repos)
if ("DESeq2" %in% row.names(installed.packages()) == FALSE) BiocManager::install("DESeq2")
if ("AnnotationDbi" %in% row.names(installed.packages()) == FALSE) BiocManager::install("AnnotationDbi")
if ("vsn" %in% row.names(installed.packages())  == FALSE) BiocManager::install("vsn")
suppressPackageStartupMessages({
library(optparse, quietly = TRUE)
library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
})
invisible(readline(prompt="Press [enter] to continue"))
## 1. Parse arguments
#####################
option_list = list(
make_option(c("-c", "--configfile"), type="character", default=NULL,
help="configuration file must have the next structure: 'sample' 'file' 'condition' (tab-separated and with that header)", metavar="character"),
make_option(c("-p", "--cutoff"), type="numeric", default=0.05,
help="cut-off value to assign DEGs", metavar="numeric"),
make_option(c("-d", "--database"), type="character", default=NULL,
help="the name of the annotation database in the format org.XX.eg.db (to add gene names)", metavar="character")
)
opt_parser = OptionParser(option_list=option_list)
opt = parse_args(opt_parser)
if (is.null(opt$configfile)){
print_help(opt_parser)
stop("AT LEAST ONE ARGUMENT MUST BE PROVIDED", call.=FALSE)
}
## 2. Parameters
################
# load configuration file
config <- opt$configfile
sampleTable <- read.table(config, header=TRUE)
cutoff <- opt$cutoff
orgdb <- opt$database
if (!is.null(orgdb)){
if (orgdb %in% row.names(installed.packages()) == FALSE) BiocManager::install(orgdb)
suppressPackageStartupMessages({
library(orgdb, quietly = TRUE, character.only = TRUE)
})
}
## 3. Read data
###############
data <- DESeqDataSetFromHTSeqCount(sampleTable, directory=".", design= ~condition)
# extract unique elements of condition
levels <- unique(sampleTable$condition)
ll <- length(levels)
## 4. Differential test
#######################
# Analysis
#---------
dds <- DESeq(data)
ncounts <- counts(dds, normalized=TRUE)
write.table (ncounts, file="deseq2_counts.tsv", quote=FALSE, sep = "\t", col.names=NA)
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:30]
hmcol <- colorRampPalette(c("yellow", "black", "cyan"))(299)
# Data transformations to better visualize them
#----------------------------------------------
# Tikhonov Regularized Log Transformation (RLT)
# see http://en.wikipedia.org/wiki/Tikhonov_regularization
rlt <- rlog(dds)
rltMat <- assay(rlt)
# variance stabilizing transformation (VST)
# see http://en.wikipedia.org/wiki/Variance-stabilizing_transformation
vst <- varianceStabilizingTransformation(dds)
vstMat <- assay(vst)
# effects of the transformation in the variance
notAllZero <- (rowSums(counts(dds))>0)	# dicard zero counts
# distances heatmap
distRL <- dist(t(rltMat))
distMat <- as.matrix(distRL)
hc <- hclust(distRL)
tiff(filename = "deseq2_distances.tiff", units="in", width=5, height=5, res=300)
heatmap.2(distMat, Rowv=as.dendrogram(hc), symm=TRUE, trace="none", col=rev(hmcol),
margin=c(10, 6), main="Distances matrix", key.title=NA)
invisible(dev.off())
tiff(filename = "deseq2_hm30_vst.tiff", units="in", width=5, height=5, res=300)
par(cex.main=0.8)
heatmap.2(vstMat[select,], col=hmcol, Rowv=FALSE, Colv=FALSE, scale="none",
dendrogram="none", trace="none", margin=c(5, 7), main="30 most highly \n expressed genes (VST)", labRow=F, key.title=NA)
invisible(dev.off())
# PCA plot_labelled
require("ggrepel")
tiff(filename = "deseq2_pca_labels.tiff", units="in", width=5, height=5, res=300)
pca <- plotPCA(rlt)
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes(label=colnames(rlt)),  size=2)
invisible(dev.off())
# Dispersion_plot
# plots the per-gene dispersion estimates together with the fitted
# mean-dispersion relationship
tiff(filename = "deseq2_dispersion.tiff", units="in", width=5, height=5, res=300)
plotDispEsts(dds, main="Per-gene dispersion estimates")
invisible(dev.off())
# Pair-wise comparisons
#----------------------
for (i in 1:(ll-1)) {
for (j in (i+1):ll) {
l1 <- toString(levels[i])
l2 <- toString(levels[j])
conditions = c(l1, l2)
conds = subset(sampleTable, sampleTable$condition %in% conditions)
samples = conds$sample
df = data.frame(condition=conds$condition)
rownames(df) = samples
my_colour = list(df=c(l1="orange", l2="skyblue"))
suffix <- paste(l2, l1, sep="_vs_")
res <- results(dds, contrast=c("condition", l2, l1))
res$FoldChange <- 2^res$log2FoldChange
res <- res[colnames(res)[c(1,7,2:6)]] # order columns
# MAplot
file <- paste("deseq2_maplot_", suffix, ".tiff", sep="")
main <- paste("MA-plot", suffix, sep=" ")
tiff(filename = file, units="in", width=5, height=5, res=300)
plotMA(res, alpha= 0.05, main=main)
#		identify(res$baseMean, res$log2FoldChange)	# draw line number of gene clicking on a point
invisible(dev.off())
if (!is.null(orgdb)){
symbol <- mapIds(get(orgdb), keys=row.names(res), column="ENTREZID", keytype="SYMBOL", multiVals="first") #to obtain gene symbols
description <- mapIds(get(orgdb), keys=row.names(res), column="GENENAME", keytype="SYMBOL", multiVals="first") #to obtain description
res <- cbind(symbol, res) #to add the symbols to the results file
res$description <- description
}
# writing results for all & significative genes
file <- paste("deseq2_all_", suffix, ".tsv", sep="")
write.table (res, file=file, quote=FALSE, sep="\t", col.names=NA)
file <- paste("deseq2_sig_padj", suffix, ".tsv", sep="")
sig <- subset(res, res$padj < cutoff)
subcounts <- subset(ncounts, rownames(ncounts) %in% rownames(sig))
subcounts <- subcounts[,rownames(df)]
lsubcounts <- log2(subcounts+1)
write.table (sig, file=file, quote=FALSE, sep="\t", col.names=NA)
# save results with pvalue instead of padj
file <- paste("deseq2_sig_pval", suffix, ".tsv", sep="")
sig_pval <- subset(res, res$pvalue < cutoff)
write.table (sig_pval, file=file, quote=FALSE, sep="\t", col.names=NA)
# heatmap of DEG
file <- paste("deseq2_heatmap_", suffix, ".tiff", sep="")
main <- paste("Heatmap", suffix, "log2(exp+1)", sep=" ")
tiff(filename = file, units="in", width=5, height=5, res=300)
pheatmap(mat=lsubcounts, color=hmcol, border_color=F, scale="row", cluster_cols=T,
cluster_rows=T, fontsize_row=9, annotation_col=df, annotation_colors=my_colour, show_rownames=F,
show_colnames=T, annotation_names_col=F, annotation_names_row=F, main=main)
invisible(dev.off())
}
}
# 5. Save work space and quit
#############################
msg1 = "!!O_o!!----------------DONE------------------"
msg2 = "That's all folks! Quitting ..."
print(msg1)
print(msg2)
save(list=ls(), file="deseq2.RData")
#q()
setwd("C:/Users/CBM/Desktop/RNAseq_bipolarDisorder")
suppressPackageStartupMessages({
library(optparse, quietly = TRUE)
#library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
library('org.Hs.eg.db', quietly = TRUE, character.only = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(tidyr, quietly= TRUE)
})
require("ggrepel", quietly = TRUE)
cutoff <- 0.05 #significancy p value adjusted
FC_threshold <- 4 #fold change threshold to consider in graphs
#Load variables of each sample
config <- './configfile_pedlabels.txt'
sampleTable <- read.table(config, header=TRUE, colClasses= c('factor','character',
'factor',
'factor', 'factor',
'factor'))
#Convert the counts into a DeSeq DataSet object
data <- DESeqDataSetFromHTSeqCount(sampleTable, directory=".",
design = ~ age + gender + PED + condition)
## Analysis
#Pre-filtering: clean some of the noise in the counts
keep <- rowSums(counts(data)) >= 10
data <- data[keep,]
rm(keep)
# DESeq: not original function to adjust number of iterations
dds <- estimateSizeFactors(data)
dds <- estimateDispersions(dds)
dds <- nbinomWaldTest(dds, maxit = 10000)
dds_normalized <- counts(dds, normalized=TRUE)
#save file with normalized counts: will be used for WGCNA
write.table (dds_normalized, file="MyResults_DEG/counts_normalized.tsv", quote=FALSE,
sep = "\t", col.names=NA)
#PCA: blind must be FALSE to take into account batch effect
vst <- varianceStabilizingTransformation(dds, blind = FALSE)
mat <- assay(vst)
mm <- model.matrix(~condition, colData(vst))
mat <- limma::removeBatchEffect(mat,
batch=vst$PED, batch2=vst$gender,
batch3=vst$age, design=mm)
assay(vst) <- mat
tiff(filename = "MyResults_DEG/PCA.tiff", units="in", width=5,
height=5, res=300)
pca <- plotPCA(vst)
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes
(label=colnames(vst)),
size=1)
install.packages("evaluate")
install.packages("digest")
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes
(label=colnames(vst)),
size=1)
invisible(dev.off())
setwd("C:/Users/CBM/Desktop/RNAseq_bipolarDisorder")
#save file with normalized counts: will be used for WGCNA
write.table (dds_normalized, file="MyResults_DEG/counts_normalized.tsv", quote=FALSE,
sep = "\t", col.names=NA)
tiff(filename = "MyResults_DEG/PCA.tiff", units="in", width=5,
height=5, res=300)
pca <- plotPCA(vst)
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes
(label=colnames(vst)),
size=1)
invisible(dev.off())
pca
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes
(label=colnames(vst)),
size=1)
invisible(dev.off())
tiff(filename = "MyResults_DEG/PCA.tiff", units="in", width=5,
height=5, res=300)
pca <- plotPCA(vst)
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes
(label=colnames(vst)),
size=1)
invisible(dev.off())
distRL <- dist(t(mat))
distMat <- as.matrix(distRL)
hc <- hclust(distRL)
hmcol <- colorRampPalette(c("white", "blue"))(299)
tiff(filename = "MyResults_DEG/distances.tiff", units="in", width=5, height=5, res=200)
heatmap.2(distMat, Rowv=as.dendrogram(hc), symm=TRUE, trace="none", col=rev(hmcol),
margin=c(10, 6), main="Distances matrix", key.title=NA)
invisible(dev.off())
rm(hc)
rm(distMat)
rm(distRL)
#Dispersion plot
tiff(filename = "MyResults_DEG/dispersion.tiff", units="in", width=5, height=5, res=300)
plotDispEsts(dds, main="Per-gene dispersion estimates")
invisible(dev.off())
##Pair-wise comparisons
#Get factor levels
levels <- unique(sampleTable$condition)
l1 <- toString(levels[2]) #reference level has to be Unaffected
l2 <- toString(levels[1])
suffix <- paste(l1, l2, sep="_vs_")
#Get results
res <- results(dds, contrast=c("condition", l2, l1))
res$FoldChange <- 2^res$log2FoldChange
res <- res[colnames(res)[c(1,7,2:6)]] # order columns
# MAplot
tiff(filename = "MyResults_DEG/maplot.tiff", units="in", width=5, height=5, res=300)
plotMA(res, alpha= 0.05, main=paste("MA-plot", suffix, sep=" "))
invisible(dev.off())
#Add annotation to results
symbol <- mapIds(get('org.Hs.eg.db'), keys=row.names(res), column="SYMBOL",
keytype="ENSEMBL", multiVals="first") #to obtain gene symbols
description <- mapIds(get('org.Hs.eg.db'), keys=row.names(res),
column="GENENAME", keytype="ENSEMBL",
multiVals="first") #to obtain description
res <- cbind(symbol, res)
res$description <- description
write.table (res, file="MyResults_DEG/all_genes.tsv", quote=FALSE, sep="\t", col.names=NA)
sig_pval <- subset(res, res$pvalue < cutoff)
write.table (sig_pval, file="MyResults_DEG/sig_pval.tsv", quote=FALSE, sep="\t", col.names=NA)
rm(sig_pval)
#Get most significant genes according to cut off
significant <- subset(res, res$padj < cutoff)
significant <- significant[order(significant$padj),]
#PCA 2D
interest_genes <- rownames(significant)
dds_sig <- dds[interest_genes,]
vst_sig <- varianceStabilizingTransformation(dds_sig, blind = FALSE)
mat_sig <- assay(vst_sig)
mm_sig <- model.matrix(~condition, colData(vst_sig))
mat_sig <- limma::removeBatchEffect(mat_sig,
batch=vst_sig$PED, batch2=vst_sig$gender,
batch3=vst_sig$age, design=mm_sig)
assay(vst_sig) <- mat_sig
tiff(filename = "MyResults_DEG/PCA_sig.tiff", units="in", width=5,
height=5, res=300)
pca_sig <- plotPCA(vst_sig)
pca_sig + ggtitle("PCA - only significant genes") + geom_text_repel(aes
(label=colnames(vst_sig)),
size=1.5)
invisible(dev.off())
#Discard those genes with unbelievable Fold Change (outliers)
#significant <- significant[(significant$log2FoldChange >= -FC_threshold) &
#(significant$log2FoldChange <= FC_threshold),]
write.table (significant, file="MyResults_DEG/0.05_sig_padj.tsv", quote=FALSE, sep="\t", col.names=NA)
#For the GSEA analysis, we only want the gen ID and the log2FC value
gsea_list <- significant[colnames(significant)[4]]
write.table(gsea_list, file='MyResults_DEG/gsea_list.tsv', quote=FALSE, sep="\t", col.names=FALSE)
#Volcano plot
discardNA <- !is.na(res$padj)
res2 <- res[discardNA,]
remove_outliers<- (res2$log2FoldChange >= -FC_threshold) & (res2$log2FoldChange <= FC_threshold)
res2 <- res2[remove_outliers,]
rm(discardNA)
rm(remove_outliers)
jpeg(filename = "MyResults_DEG/VolcanoPLOT.jpeg", units="in", width=8, height=10, res=300)
EnhancedVolcano(res2, lab = res2$symbol, x = 'log2FoldChange', y = 'pvalue',
pCutoff = 0.0002, FCcutoff= 0.3, #pCutOff is p value for last significant acc to adjp value
ylim = c(0, 11), xlim = c(-FC_threshold, FC_threshold), labSize = 3,
legendLabSize = 9, legendIconSize = 5, drawConnectors = TRUE,
widthConnectors = 0.5, max.overlaps = 50, title = '', arrowheads = FALSE,
subtitle= '', gridlines.major = FALSE, gridlines.minor = FALSE)
invisible(dev.off())
#Heatmap
significant001 <- significant[significant$padj < 0.01,]
#Extract from the normalized counts table the data from the significant genes
subcounts <- subset(dds_normalized, rownames(dds_normalized) %in% rownames(significant001))
lsubcounts <- log2(subcounts+1) #added pseudocount 1
#For the plot gene names
sig_symbol <- as.character(significant001$symbol)
make_italics <- function(x){
as.expression(lapply(x, function(y) bquote(italic(.(y)))))
}
conditions <- c(l1, l2)
conds <- subset(sampleTable, sampleTable$condition %in% conditions)
samples <- conds$sample
df <- data.frame(condition=conds$condition)
rownames(df) <- samples
my_colour <- list(df=c(l1="skyblue", l2="orange"))
jpeg(filename = "MyResults_DEG/heatmap.jpeg", units="in", width=8, height=5, res=300)
pheatmap(lsubcounts, scale= 'row', cluster_rows = TRUE,
cluster_cols = TRUE, legend= TRUE, drop_levels = TRUE,
labels_row = make_italics(sig_symbol),
main = "Heatmap of genes with adjusted p-value < 0.01",
annotation_col = df, annotation_colors = my_colour,
treeheight_row = 30, treeheight_col = 20)
invisible(dev.off())
rm(conditions)
rm(conds)
rm(samples)
rm(df)
rm(my_colour)
?tiff
install.packages('sys')
tiff(filename = "MyResults_DEG/PCA.tiff", units="in", width=5,
height=5, res=300)
pca <- plotPCA(vst)
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes
(label=colnames(vst)),
size=1)
invisible(dev.off())
suppressPackageStartupMessages({
library(optparse, quietly = TRUE)
library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
library('org.Hs.eg.db', quietly = TRUE, character.only = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(tidyr, quietly= TRUE)
})
require("ggrepel", quietly = TRUE)
update.packages()
assay(vst) <- mat
tiff(filename = "MyResults_DEG/PCA.tiff", units="in", width=5,
height=5, res=300)
pca <- plotPCA(vst)
pca + ggtitle("Principal Components Plot") + geom_text_repel(aes
(label=colnames(vst)),
size=1)
invisible(dev.off())
