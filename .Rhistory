library(tidyverse)
library(lubridate)
library(hms)
library(tidyverse)
library(lubridate)
nightshift <- FALSE
n_workd <- 5
get_hours <- function(var_hour){
var_hour <- paste(var_hour, '00', sep=':')
hours <- hms(var_hour)
return(hours)
}
decimal_hour <- function(hour_time){
decim_h <- hour(hour_time)+ minute(hour_time)/60
if (hour(hour_time) > 18) {
decim_h <- (24-decim_h) * (-1)
}
return(decim_h)
}
get_MSFsc <- function(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift){
if(nightshift == FALSE){
return('Not possible to calculate chronotype due to nightshifts')
} else {
SD_work = time_wake_workD - time_sleep_workD
MS_work = time_sleep_workD + SD_work/2
SD_free = time_wake_freeD - time_sleep_freeD
MS_free = time_sleep_freeD + SD_free/2
SD_week = (n_workd*SD_work + (7-n_workd)*SD_free)/7
if(SD_free <= SD_work){
MSFsc = MS_free
} else {
MSFsc = MS_free - (SD_free - SD_week)/2
}
return(MSFsc)
}
}
#get inputs
time_sleep_workD <- get_hours('23:30')
time_wake_workD <- get_hours('7:00')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('8:00')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
nightshift <- TRUE
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
#get inputs
time_sleep_workD <- get_hours('22:20')
time_wake_workD <- get_hours('6:00')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('9:30')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
time_sleep_workD <- get_hours('23:30')
time_wake_workD <- get_hours('7:50')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('9:00')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
#get inputs
time_sleep_workD <- get_hours('23:15')
time_wake_workD <- get_hours('6:45')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('7:30')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
library(DESeq2)
?results
setwd(".")
setwd("C:/Users/Asus/OneDrive/Escritorio/RNAseq_bipolarDisorder")
suppressPackageStartupMessages({
library(dplyr, quietly = T)
library(DESeq2, quietly = T)
library(magrittr, quietly = T)
library(ggplot2, quietly = T)
library(WGCNA, quietly = T)
#library(limma, quietly = T)
})
options(stringsAsFactors = FALSE)
enableWGCNAThreads()
load('MyResults_WGCNA/network_manual_construction.RData')
load('Myresults_WGCNA/initialData_datExpr_sampleRanle.RData')
load('Myresults_WGCNA/initialData_datExpr_sampleTable.RData')
#Quantify module trait associations
nGenes <- ncol(datExpr)
nSamples <- nrow(datExpr)
MEs2 <- moduleEigengenes(datExpr, moduleColors)$eigengenes
View(MEs2)
View(MEs)
MEs2 <- orderMEs(MEs2)
?cor
View(MEs2)
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
View(moduleTraitCor)
View(sampleTable)
sampletable <- sampleTable[,c(1,2,4,3)]
View(sampletable)
View(sampleTable)
moduleTraitCor <- cor(MEs, sampletable, use = "p")
View(moduleTraitCor)
setwd("C:/Users/Asus/OneDrive/Escritorio/RNAseq_bipolarDisorder")
suppressPackageStartupMessages({
library(dplyr, quietly = T)
library(DESeq2, quietly = T)
library(magrittr, quietly = T)
library(ggplot2, quietly = T)
library(WGCNA, quietly = T)
})
options(stringsAsFactors = FALSE)
enableWGCNAThreads()
#1. Load data
#Load variables
sampleTable <- read.table('configfile_pedlabels.txt', header=TRUE, row.names = 1,
colClasses = rep('factor', 5))
sampleTable <- sampleTable[,c(3,4,5,2)]
names(sampleTable) #check gender, age, PED and condition are present
#Load expression data
df <- read.table(file = 'MyResults_DEG/counts_raw.tsv', sep = '\t',
header = TRUE, row.names = 1)
#Filter low count genes, with less than 10 counts in 90% of features
keep <- rowSums(df > 10) > (ncol(df) * 0.9)
df <- df[keep,] #drastic drop from 28525 to 14938
#order as in metafile
df <- df %>%
dplyr::select(rownames(sampleTable))
rm(keep)
#Get a DeSeq object
dds <- DESeqDataSetFromMatrix(countData = df, colData = sampleTable,
design = ~ age + gender + PED + condition)
dds_norm <- vst(dds, blind = FALSE)
df_norm <- assay(dds_norm)
mm <- model.matrix(~condition, colData(dds_norm))
df_norm <- limma::removeBatchEffect(df_norm,
batch=dds_norm$PED, batch2=dds_norm$gender,
batch3=dds_norm$age, design=mm)
#Transpose for the WGCNA
datExpr <- as.data.frame(t(df_norm))
#It doesn't seem to be any outlier
#####
#save relevant objects
save(datExpr, sampleTable, file = 'MyResults_WGCNA/initialData_datExpr_sampleTable.RData')
load('MyResults_WGCNA/network_manual_construction.RData')
#3. Relating modules to external clinical traits and identifying important genes
#Quantify module trait associations
nGenes <- ncol(datExpr)
nSamples <- nrow(datExpr)
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
View(moduleTraitCor)
trait <- sampleTable[,4]
trait
moduleTraitCor <- cor(MEs, trait, use = "p")
trait <- subset(sampleTable[,4])
?subset
colnames(trait) <- 'Condition'
trait
View(sampleTable)
trait <- sampleTable[,'condition']
trait <- as.matrix(sampleTable[,'condition'], drop = F)
moduleTraitCor <- cor(MEs, trait, use = "p")
View(moduleTraitCor)
colnames(trait)
colnames(trait) <- 'Condition'
colnames(trait)
View(trait)
colnames(trait) <- 'condition'
moduleTraitCor <- cor(MEs, trait, use = "p")
View(moduleTraitCor)
moduleTraitCor <- WGCNA::cor(MEs, trait, use = "p")
standardScreeningBinaryTrait(datExpr, trait, corFnc = cor)
moduleTraitCor <- bicor(MEs, trait, use = "p")
View(moduleTraitCor)
moduleTraitCor <- bicor(MEs, trait, use = "p", robustY=FALSE, maxPOutliers=0.1)
View(sampleTable)
class(trait)
levels(sampleTable$condition)
levels(sampleTable$condition) <- c(1,0)
View(sampleTable)
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
levels(sampleTable$gender)
colnames(trait)[4] <- 'is.Affected'
nSamples <- nrow(datExpr)
levels(sampleTable$condition) <- c(1,0)
colnames(sampleTable)[4] <- 'is.Affected'
View(sampleTable)
colnames(sampleTable)[1] <- 'is.Female'
levels(sampleTable$gender) <- c(1,0)
levels(sampleTable$gender)
load('Myresults_WGCNA/initialData_datExpr_sampleTable.RData')
load('MyResults_WGCNA/network_manual_construction.RData')
#3. Relating modules to external clinical traits and identifying important genes
#Quantify module trait associations
nGenes <- ncol(datExpr)
nSamples <- nrow(datExpr)
levels(sampleTable$condition) <- c(1,0)
colnames(sampleTable)[4] <- 'is.Affected'
levels(sampleTable$gender) <- c(1,0)
colnames(sampleTable)[1] <- 'is.Female'
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
levels(sampleTable$age)
levels(sampleTable$age) <- c(1,2,0)
levels(sampleTable)[2] <- 'age_stage'
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
View(moduleTraitCor)
View(moduleTraitPvalue)
corPvalueStudent
?corPvalueStudent
dim(moduleTraitCor)
View(moduleTraitCor)
View(moduleTraitPvalue)
cp = corAndPvalue(MEs, sampleTable)
moduleTraitCor2 = cp$cor
moduleTraitPvalue2 = cp$p
View(moduleTraitPvalue2)
View(moduleTraitPvalue)
?corPvalueStudent
