#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
nightshift <- TRUE
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
#get inputs
time_sleep_workD <- get_hours('22:20')
time_wake_workD <- get_hours('6:00')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('9:30')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
time_sleep_workD <- get_hours('23:30')
time_wake_workD <- get_hours('7:50')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('9:00')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
#get inputs
time_sleep_workD <- get_hours('23:15')
time_wake_workD <- get_hours('6:45')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('7:30')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
library(DESeq2)
?results
setwd("C:/Users/Asus/OneDrive/Escritorio/RNAseq_bipolarDisorder")
suppressPackageStartupMessages({
library(dplyr, quietly = T)
library(magrittr, quietly = T)
library(ggplot2, quietly = T)
library(WGCNA, quietly = T)
})
options(stringsAsFactors = FALSE)
enableWGCNAThreads()
load('Myresults_WGCNA/initialData_datExpr_sampleTable.RData')
load('MyResults_WGCNA/network_manual_construction.RData')
#3. Relating modules to external clinical traits and identifying important genes
#Quantify module trait associations
nGenes <- ncol(datExpr)
nSamples <- nrow(datExpr)
levels(sampleTable$condition) <- c(1,0)
colnames(sampleTable)[4] <- 'is.Affected'
levels(sampleTable$gender) <- c(1,0)
colnames(sampleTable)[1] <- 'is.Female'
levels(sampleTable$age) <- c(1,2,0)
levels(sampleTable)[2] <- 'age_stage'
#Probar aÃ±adiendo una columna con las edades reales
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
#As previously thought, the cor between covariates is very small
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
#It gets the same results as the following code, which takes
#into account the number of tests, thus, the adjusted p value:
cp <- corAndPvalue(MEs, sampleTable)
colnames(cp)
head(cp)
#Graphical representation:
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
#Graphical representation:
sizeGrWindow(10,6)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
tiff(file = "MyResults_WGCNA/Module-trait_relation.tiff",units= "in",
height = 15, width = 20)
tiff(file = "MyResults_WGCNA/Module-trait_relation.tiff", units= "px",
height = 15, width = 20)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
invisible(dev.off())
tiff(file = "MyResults_WGCNA/Module-trait_relation.tiff", units= "px",
height = 15, width = 20)
par(mar = c(6, 8.5, 3, 3))
tiff(file = "MyResults_WGCNA/Module-trait_relation.tiff", units= "px",
height = 50, width = 50)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
invisible(dev.off())
tiff(file = "MyResults_WGCNA/Module-trait_relation.tiff",device = 'tiff', units= "in",
height = 50, width = 50)
tiff(file = "MyResults_WGCNA/Module-trait_relation.tiff",
height = 50, width = 50)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
dev.off()
pdf(file = "MyResults_WGCNA/Module-trait_relation.pdf", units= 'in',
height = 50, width = 50)
?pdf
pdf(file = "MyResults_WGCNA/Module-trait_relation.pdf",
height = 50, width = 50)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
invisible(dev.off())
pdf(file = "MyResults_WGCNA/Module-trait_relation.pdf",
height = 20, width = 20)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
invisible(dev.off())
?labeledHeatmap
pdf(file = "MyResults_WGCNA/Module-trait_relation.pdf",
height = 20, width = 20)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
invisible(dev.off())
pdf(file = "MyResults_WGCNA/Module-trait_relation.pdf",
height = 20, width = 10)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(sampleTable),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
invisible(dev.off())
#Focus on trait of interest: condition
condition <- as.data.frame(sampleTable$is.Affected)
names(condition)
names(condition) <- 'condition'
?substring
View(moduleTraitCor)
View(moduleTraitPvalue)
View(textMatrix)
?labeledHeatmap
#Focus on trait of interest: condition
condition <- as.data.frame(sampleTable$is.Affected)
names(condition) <- 'condition'
modNames <- substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, weight, use = "p"));
geneTraitSignificance = as.data.frame(cor(datExpr, condition, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(condition), sep="");
names(GSPvalue) = paste("p.GS.", names(condition), sep="");
modNames
length(modNames)
load('Myresults_WGCNA/initialData_datExpr_sampleTable.RData')
load('MyResults_WGCNA/network_manual_construction.RData')
#3. Relating modules to external clinical traits and identifying important genes
#Quantify module trait associations
nSamples <- nrow(datExpr)
#Transform qualitative traits to binary code
levels(sampleTable$condition) <- c(1,0)
colnames(sampleTable)[4] <- 'is.Affected'
levels(sampleTable$gender) <- c(1,0)
colnames(sampleTable)[1] <- 'is.Female'
levels(sampleTable$age) <- c(1,2,0)
levels(sampleTable)[2] <- 'age_stage'
#Probar aÃ±adiendo una columna con las edades reales
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
#As previously thought, the cor between covariates is very small
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
#Get all together:
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix)
dim(moduleTraitCor)
dim(textMatrix) <- dim(moduleTraitCor) #give shape
nSamples
#####
#Focus on trait of interest: condition
condition <- as.data.frame(sampleTable$is.Affected)
names(condition) <- 'condition'
modNames <- substring(names(MEs), 3)
modNames
View(moduleTraitCor)
geneModuleMembership <- as.data.frame(moduleTraitCor)
MMPvalue <- as.data.frame(moduleTraitPvalue)
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
names(geneModuleMembership) <- paste("MM", modNames, sep="")
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(MMPvalue) <- paste("p.MM", modNames, sep="")
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
MMPvalue
View(MMPvalue)
names(MMPvalue) <- paste("p.MM", modNames, sep="")
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
View(geneModuleMembership)
names(geneModuleMembership) <- paste("MM", modNames, sep="")
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
names(geneModuleMembership) <- paste("MM", modNames, sep=" ")
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
names(geneModuleMembership) <- paste("MM", modNames, sep="_")
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(MMPvalue) <- paste("p_MM", modNames, sep="_")
geneTraitSignificance <- as.data.frame(cor(datExpr, condition, use = "p"))
names(geneTraitSignificance) <- paste("GS.", names(condition), sep="")
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(GSPvalue) <- paste("p.GS.", names(condition), sep="")
?substring
MEs
names(MEs)
moduleNames <- substring(names(MEs), 3)
moduleNames
?corPvalueStudent
View(GSPvalue)
#It gets the same results as the following code, which takes
#into account the number of tests, thus, the adjusted p value:
#cp <- corAndPvalue(MEs, sampleTable)
#moduleTraitCor2 <- cp$cor
#moduleTraitPvalue2 <- cp$p
moduleTraitCor2 <- cor(MEs, condition, use='p')
View(moduleTraitCor2)
View(moduleTraitCor)
moduleTraitPvalue2 <- corPvalueStudent(moduleTraitCor2, nSamples = nSamples)
View(moduleTraitPvalue)
View(moduleTraitPvalue2)
alpha <- 0.01
prueba <- filter(moduleTraitPvalue, moduleTraitPvalue$is.Affected<alpha)
class(moduleTraitPvalue)
#3.3 Intramodular analysis
#First get significant modules
modTraitP_df <- as.data.frame(moduleTraitPvalue)
modTraitP_df$is.Affected
rownames(modTraitP_df) <- rownames(moduleTraitPvalue)
modTraitP_df$is.Affected
#3.3 Intramodular analysis
#First get significant modules
modTraitP_df <- as.data.frame(moduleTraitPvalue)
View(modTraitP_df)
load('MyResults_WGCNA/initialData_datExpr_sampleTable.RData')
load('MyResults_WGCNA/network_manual_construction.RData')
nSamples <- nrow(datExpr)
alpha <- 0.01
levels(sampleTable$condition) <- c(1,0)
colnames(sampleTable)[4] <- 'is.Affected'
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
#As previously thought, the cor between covariates is very small
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
names(geneModuleMembership) <- paste("MM", modNames, sep="_")
condition <- as.data.frame(sampleTable$is.Affected)
names(condition) <- 'condition'
#correlation of each gene in each sample to each module
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
names(geneModuleMembership) <- paste("MM", moduleNames, sep="_")
moduleNames <- substring(names(MEs), 3) #3 to take away prefix
#correlation of each gene in each sample to each module
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p")) #not the same as moduleTraitCor
names(geneModuleMembership) <- paste("MM", moduleNames, sep="_")
#p value of last correlation
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(MMPvalue) <- paste("p_MM", moduleNames, sep="_")
#correlation of each gene to each condition
geneTraitSignificance <- as.data.frame(cor(datExpr, condition, use = "p"))
names(geneTraitSignificance) <- paste("GS.", names(condition), sep="")
#p values of last correlation
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(GSPvalue) <- paste("p.GS.", names(condition), sep="")
#3.3 Intramodular analysis
#First get significant modules
modTraitP_df <- as.data.frame(moduleTraitPvalue)
prueba <- filter(modTraitP_df, modTraitP_df$is.Affected<alpha)
prueba
View(modTraitP_df)
levels(sampleTable$gender) <- c(1,0)
colnames(sampleTable)[1] <- 'is.Female'
levels(sampleTable$age) <- c(1,2,0)
levels(sampleTable)[2] <- 'age_stage'
#Probar aÃ±adiendo una columna con las edades reales
moduleTraitCor <- cor(MEs, sampleTable, use = "p")
View(moduleTraitCor)
#As previously thought, the cor between covariates is very small
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)
View(moduleTraitPvalue)
rownames(sigMods)
sigMods <- filter(modTraitP_df, modTraitP_df$is.Affected<alpha)
rownames(sigMods)
sigMods
sigMods <- rownames(sigMods)
sigMods
sigMods <- filter(modTraitP_df, modTraitP_df$is.Affected<alpha)
sigMods
sigMods <- substring(rownames(sigMods), 3)
sigMods
mod <- 'firebrick4'
column <- match(mod, moduleNames)
moduleGenes <- moduleColors==mod
column
moduleGenes
sum(moduleGenes)
mod <- 'firebrick4'
column <- match(mod, moduleNames)
moduleGenes <- moduleColors==mod
tiff(filename = paste('MyResults_WGCNA/intramodular_',mod,'.tiff', sep=''), units="in",
width=5, height=5, res=300)
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", mod, "module"),
ylab = "Gene significance for condition",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = mod)
invisible(dev.off())
for (i in sigMods){
mod <- i
column <- match(mod, moduleNames)
moduleGenes <- moduleColors==mod
tiff(filename = paste('MyResults_WGCNA/intramodular_',mod,'.tiff', sep=''), units="in",
width=5, height=5, res=300)
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", mod, "module"),
ylab = "Gene significance for condition",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = mod)
invisible(dev.off())
}
