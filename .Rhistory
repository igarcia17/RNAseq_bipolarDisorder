library(tidyverse)
library(lubridate)
library(hms)
library(tidyverse)
library(lubridate)
nightshift <- FALSE
n_workd <- 5
get_hours <- function(var_hour){
var_hour <- paste(var_hour, '00', sep=':')
hours <- hms(var_hour)
return(hours)
}
decimal_hour <- function(hour_time){
decim_h <- hour(hour_time)+ minute(hour_time)/60
if (hour(hour_time) > 18) {
decim_h <- (24-decim_h) * (-1)
}
return(decim_h)
}
get_MSFsc <- function(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift){
if(nightshift == FALSE){
return('Not possible to calculate chronotype due to nightshifts')
} else {
SD_work = time_wake_workD - time_sleep_workD
MS_work = time_sleep_workD + SD_work/2
SD_free = time_wake_freeD - time_sleep_freeD
MS_free = time_sleep_freeD + SD_free/2
SD_week = (n_workd*SD_work + (7-n_workd)*SD_free)/7
if(SD_free <= SD_work){
MSFsc = MS_free
} else {
MSFsc = MS_free - (SD_free - SD_week)/2
}
return(MSFsc)
}
}
#get inputs
time_sleep_workD <- get_hours('23:30')
time_wake_workD <- get_hours('7:00')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('8:00')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
nightshift <- TRUE
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
#get inputs
time_sleep_workD <- get_hours('22:20')
time_wake_workD <- get_hours('6:00')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('9:30')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
time_sleep_workD <- get_hours('23:30')
time_wake_workD <- get_hours('7:50')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('9:00')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
#get inputs
time_sleep_workD <- get_hours('23:15')
time_wake_workD <- get_hours('6:45')
time_sleep_freeD <- get_hours('0:00')
time_wake_freeD <- get_hours('7:30')
#Transform input hours
time_sleep_workD <- decimal_hour(time_sleep_workD)
time_wake_workD <- decimal_hour(time_wake_workD)
time_sleep_freeD <- decimal_hour(time_sleep_freeD)
time_wake_freeD <- decimal_hour(time_wake_freeD)
res <- get_MSFsc(time_sleep_workD, time_wake_workD,
time_sleep_freeD, time_wake_freeD,
n_workd, nightshift)
if (is.character(res)){
print(res)
}else{
if (res < 3.45){
print('Your chronotype is LION: you are a morning person')
}else{
if (res > 4.7){
print('Your chronotype is WOLF: you are an evening person')
}else{
print('Your chronotype is BEAR: your sleep pattern is in between morningness and eveningness')
}
}
}
library(DESeq2)
?results
setwd("C:/Users/Asus/OneDrive/Escritorio/RNAseq_bipolarDisorder")
suppressPackageStartupMessages({
library(dplyr, quietly = T)
library(DESeq2, quietly = T)
library(magrittr, quietly = T)
library(ggplot2, quietly = T)
library(WGCNA, quietly = T)
#library(limma, quietly = T)
})
options(stringsAsFactors = FALSE)
enableWGCNAThreads()
#2. Network construction and module detection
load(file = 'MyResults_WGCNA/initialData_datExpr_sampleTable.RData')
#####
#PARAMETERS
#set the soft threshold parameter at 12 as it is the lowest at which
#we obtain a R^2 of 0.9
sft_power <- 12
#Set minimum module size
minMod <- 15
load(file='MyResults_WGCNA/tom_dissTom_geneTree.RData')
#Cut the dendrogram
dynamicMods <- cutreeDynamic(geneTree, distM = diss_tom, deepSplit =2,
pamRespectsDendro =F, minClusterSize = minMod)
#Cut the dendrogram
dynamicMods <- cutreeDynamic(geneTree, distM = diss_tom, deepSplit =2,
pamRespectsDendro =F, minClusterSize = 30)
geneTree <- hclust(as.dist(diss_tom), method = 'average')
#Save this objects, as running previous commands is very computationally expensive
save(tom, diss_tom, geneTree, file = 'MyResults_WGCNA/tom_dissTom_geneTree.RData')
#Cut the dendrogram
dynamicMods <- cutreeDynamic(geneTree, distM = diss_tom, deepSplit =2,
pamRespectsDendro =F, minClusterSize = minMod)
table(dynamicMods)
dynColors <- labels2colors(dynamicMods)
plotDendroAndColors(geneTree, dynColors, 'Dynamic Tree Cut', dendroLabels = F,
hang=0.03, addGuide = T, guideHang = 0.05,
main = 'Gene dendrogram and module colors')
#Merge modules with similar expression profile
MEList <- moduleEigengenes(datExpr, colors = dynColors)
MEs <-MEList$eigengenes
MEDiss <- 1-cor(MEs)
METree <- hclust(as.dist(MEDiss), method = 'average')
plot(METree, main = 'Clustering of Module Eigengenes')
plot(METree, main = 'Clustering of Module Eigengenes')
pdf(file = 'MyResults_WGCNA/Clustering_of_modules.pdf', width = 10, height = 8)
plot(METree, main = 'Clustering of Module Eigengenes')
invisible(dev.off())
pdf(file = 'MyResults_WGCNA/Clustering_of_modules.pdf', width = 15, height = 8)
plot(METree, main = 'Clustering of Module Eigengenes')
invisible(dev.off())
pdf(file = 'MyResults_WGCNA/Clustering_of_modules.pdf', width = 20, height = 8)
plot(METree, main = 'Clustering of Module Eigengenes')
invisible(dev.off())
#we set a height cut of 0.25 which corresponds to a correlation of 75%
MEDissThr <- 0.25
abline(h=MEDissThr, col = 'red')
pdf(file = 'MyResults_WGCNA/Clustering_of_modules.pdf', width = 20, height = 8)
plot(METree, main = 'Clustering of Module Eigengenes')
abline(h=MEDissThr, col = 'red')
invisible(dev.off())
merge <- mergeCloseModules(datExpr, dynColors, cutHeight = MEDissThr, verbose = 3)
mergedCols <- merge$colors
mergedMEs <- merge$newMEs
#Plot the modules with and without the merging
pdf(file='MyResults_WGCNA/Gene_dendogram.pdf', wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynColors, mergedColors),
c('Dynamic Tree Cut','Merged dynamic'),
dendroLabels = F, hang = 0.03, guideHang = 0.05, addGuide = T)
mergedColors <- merge$colors
plotDendroAndColors(geneTree, cbind(dynColors, mergedColors),
c('Dynamic Tree Cut','Merged dynamic'),
dendroLabels = F, hang = 0.03, guideHang = 0.05, addGuide = T)
invisible(dev.off())
#Plot the modules with and without the merging
pdf(file='MyResults_WGCNA/Gene_dendogram.pdf', wi = 20, he = 6)
plotDendroAndColors(geneTree, cbind(dynColors, mergedColors),
c('Dynamic Tree Cut','Merged dynamic'),
dendroLabels = F, hang = 0.03, guideHang = 0.05, addGuide = T)
invisible(dev.off())
#Save the results
moduleColors <- mergedColors
?standardColors
colorOrder <- c('grey', standardColors(n=NULL))
moduleLabels <- match(moduleColors, colorOrder)-1
dim(moduleColors)
length(moduleColors)
head(moduleColors)
MEs <- mergedMEs
#Save module colors and labels for subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, file=
'MyResults_WGCNA/network_manual_construction.RData')
#Plot the modules with and without the merging
pdf(file='MyResults_WGCNA/Gene_dendrogram.pdf', wi = 20, he = 6)
plotDendroAndColors(geneTree, cbind(dynColors, mergedColors),
c('Dynamic Tree Cut','Merged dynamic'),
dendroLabels = F, hang = 0.03, guideHang = 0.05, addGuide = T)
invisible(dev.off())
